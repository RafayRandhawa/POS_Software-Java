Index: src/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\npublic class Database {\r\n    private static final String url = \"jdbc:mysql://localhost:3306/employees\";\r\n    private static final String username = \"root\";\r\n    private static final String password = \"Randhawa@147\";\r\n    public static int getSalesID() {\r\n        int SalesID =0;\r\n        try{\r\n            Connection conn = DriverManager.getConnection(url,username,password);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM cashiersales ORDER BY SalesID DESC LIMIT 1\");\r\n\r\n            while (rs.next()){\r\n                SalesID = rs.getInt(\"SalesID\");\r\n            }\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \"+e.getMessage());\r\n        }\r\n\r\n        return SalesID;\r\n    }\r\n    public static String get_ManagerName(String Username){\r\n\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM managerlogininfo\");\r\n\r\n\r\n            while (rs.next()) {\r\n                String MUsername = rs.getString(\"MUsername\");\r\n                String name = rs.getString(\"ManagerName\");\r\n                if(MUsername.contentEquals(Username)){\r\n                    return name;\r\n                }\r\n            }\r\n\r\n\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n\r\n        }\r\n        catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return \"Name not found.\";\r\n    }\r\n    public static String get_CashierName(int CashierCode){\r\n\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM cashierlogininfo\");\r\n\r\n\r\n            while (rs.next()) {\r\n                int id = rs.getInt(\"CashierCode\");\r\n                String name = rs.getString(\"CashierName\");\r\n                if(id==CashierCode){\r\n                    return name;\r\n                }\r\n            }\r\n\r\n\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n\r\n        }\r\n        catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return \"Name not found.\";\r\n    }\r\n    public static boolean Validate_Cashier(int code, String passcode) {\r\n\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM cashierlogininfo\");\r\n\r\n\r\n            while (rs.next()) {\r\n                int id = rs.getInt(\"CashierCode\");\r\n                String pass = rs.getString(\"CashierPassword\");\r\n                if(id==code&&passcode.contentEquals(pass)){\r\n                    System.out.println(\"\\nThe password has been validated\");\r\n                    return true;\r\n                }\r\n            }\r\n\r\n\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n\r\n        }\r\n        catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        System.out.println(\"The Username and Password don't match\");\r\n        return false;\r\n    }\r\n    public static boolean Validate_Manager(String Username,String passcode) {\r\n\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM managerlogininfo\");\r\n\r\n\r\n            while (rs.next()) {\r\n                String id = rs.getString(\"MPassword\");\r\n                String name = rs.getString(\"MUsername\");\r\n                if(id.contentEquals(passcode)&&Username.contentEquals(name)){\r\n                    System.out.println(\"The Password has been validated\");\r\n                    return true;\r\n                }\r\n            }\r\n\r\n\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n\r\n        }\r\n        catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        System.out.println(\"The Username and Password don't match\");\r\n        return false;\r\n    }\r\n    public static ArrayList<Cashier> get_CashierDetails(){\r\n\r\n        ArrayList<Cashier> cashierArrayList = null;\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n            cashierArrayList = new ArrayList<>(1);\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM cashierdetails\");\r\n            while (rs.next()) {\r\n                int id = rs.getInt(\"CashierCode\");\r\n                String name = rs.getString(\"CashierName\");\r\n                int TotalHoursWorked = rs.getInt(\"TotNoOfHoursWorked\");\r\n                String JoinDate = rs.getString(\"JoiningDate\");\r\n                String ShiftStart = rs.getString(\"ShiftStartTime\");\r\n                String EndShift = rs.getString(\"ShiftEndTime\");\r\n                String EmploymentStatus = rs.getString(\"EmploymentStatus\");\r\n                cashierArrayList.add(new Cashier(id, name, TotalHoursWorked, JoinDate, ShiftStart, EndShift,EmploymentStatus));\r\n\r\n            }\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return cashierArrayList;\r\n    }\r\n    public static Cashier get_CashierDetails(int code){\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM cashierdetails\");\r\n            while (rs.next()){\r\n            int id = rs.getInt(\"CashierCode\");\r\n            String name = rs.getString(\"CashierName\");\r\n            int TotalHoursWorked = rs.getInt(\"TotNoOfHoursWorked\");\r\n            String JoinDate = rs.getString(\"JoiningDate\");\r\n            String ShiftStart = rs.getString(\"ShiftStartTime\");\r\n            String EndShift = rs.getString(\"ShiftEndTime\");\r\n            String EmploymentStatus = rs.getString(\"EmploymentStatus\");\r\n            if (id == code){\r\n                return new Cashier(id,name,TotalHoursWorked,JoinDate,ShiftStart,EndShift,EmploymentStatus);\r\n                }\r\n            }\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n        }\r\n        catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return new Cashier();\r\n    }\r\n    public static ArrayList<Cashier> get_CashierDetails(String Cname) {\r\n        ArrayList<Cashier> cashierArrayList = null;\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n            cashierArrayList = new ArrayList<>(1);\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM cashierdetails\");\r\n            while (rs.next()) {\r\n                int id = rs.getInt(\"CashierCode\");\r\n                String name = rs.getString(\"CashierName\");\r\n                int TotalHoursWorked = rs.getInt(\"TotNoOfHoursWorked\");\r\n                String JoinDate = rs.getString(\"JoiningDate\");\r\n                String ShiftStart = rs.getString(\"ShiftStartTime\");\r\n                String EndShift = rs.getString(\"ShiftEndTime\");\r\n                String EmploymentStatus = rs.getString(\"EmploymentStatus\");\r\n                if (name.contentEquals(Cname)) {\r\n                    cashierArrayList.add(new Cashier(id, name, TotalHoursWorked, JoinDate, ShiftStart, EndShift,EmploymentStatus));\r\n                }\r\n            }\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return cashierArrayList;\r\n    }\r\n\r\n    public static void addNewCashier(String CashierName,String Join,String Start,String End, int hrsWorked,String password1){\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n\r\n            PreparedStatement stmt = conn.prepareStatement(\"INSERT INTO cashierdetails (CashierName,JoiningDate,ShiftStartTime,ShiftEndTime,TotNoOfHoursWorked) VALUES (?,?,?,?,?)\");\r\n            stmt.setString(1,CashierName);\r\n            stmt.setString(2,Join);\r\n            stmt.setString(3,Start);\r\n            stmt.setString(4,End);\r\n            stmt.setInt(5,hrsWorked);\r\n\r\n            int rowsInserted = stmt.executeUpdate();\r\n\r\n            int CashierCode=0;\r\n            Statement stmt2 = conn.createStatement();\r\n            ResultSet rs = stmt2.executeQuery(\"SELECT * FROM cashierdetails ORDER BY CashierCode DESC LIMIT 1\");\r\n            while(rs.next()){\r\n                CashierCode = rs.getInt(\"CashierCode\");\r\n            }\r\n\r\n            stmt = conn.prepareStatement(\"INSERT INTO cashierlogininfo (CashierCode,CashierName,CashierPassword) VALUES (?,?,?)\");\r\n            stmt.setInt(1,CashierCode);\r\n            stmt.setString(2,CashierName);\r\n            stmt.setString(3,password1);\r\n\r\n            rowsInserted += stmt.executeUpdate();\r\n            stmt.close();\r\n            stmt2.close();\r\n            conn.close();\r\n            if(rowsInserted==0){\r\n                System.out.println(\"Error writing in database\");\r\n            }\r\n        }\r\n        catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n\r\n    }\r\n    public static void removeCashier(int CashierCode){\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n\r\n            PreparedStatement stmt = conn.prepareStatement(\"DELETE FROM cashierlogininfo WHERE CashierCode = ?\");\r\n            stmt.setInt(1,CashierCode);\r\n            PreparedStatement stmt2 = conn.prepareStatement(\"UPDATE cashierdetails SET EmploymentStatus=? WHERE CashierCode = ?\");\r\n            stmt2.setString(1,\"Former\");\r\n            stmt2.setInt(2,CashierCode);\r\n            int rowsInserted = stmt.executeUpdate()+ stmt2.executeUpdate();\r\n            stmt.close();\r\n            stmt2.close();\r\n            conn.close();\r\n            if(rowsInserted==0){\r\n                System.out.println(\"Error writing in database\");\r\n            }\r\n            else{\r\n                System.out.println(\"Cashier Employment Status changed to former Employee..\");\r\n            }\r\n        }\r\n        catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n    }\r\n    public static void updateCashierInfo(String CashierCode,String CashierName,String Shift){\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n            conn.setAutoCommit(true);\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM cashierlogininfo\");\r\n            int Code = Integer.parseInt(CashierCode);\r\n\r\n\r\n            PreparedStatement pstmt = null;\r\n            PreparedStatement pstmt1 = null;\r\n\r\n\r\n            pstmt = conn.prepareStatement(\"UPDATE cashierdetails \\nSET CashierName = ?\\nWHERE CashierCode = ?\");\r\n            pstmt1 = conn.prepareStatement(\"UPDATE cashierlogininfo \\n SET CashierName = ? \\nWHERE CashierCode = ?\");\r\n            pstmt.setString(1, CashierName);\r\n\r\n            pstmt.setInt(2,Code);\r\n\r\n            pstmt1.setString(1, CashierName);\r\n\r\n            pstmt1.setInt(2,Code);\r\n            pstmt.executeUpdate();\r\n            pstmt1.executeUpdate();\r\n\r\n\r\n            PreparedStatement pstmt2 = null;\r\n            if(Shift.contentEquals(\"Morning\")|| Shift.contentEquals(\"morning\")){\r\n                pstmt2 = conn.prepareStatement(\"UPDATE cashierdetails\\n SET ShiftStartTime = '08:00:00',ShiftEndTime = '16:00:00' \\nWHERE CashierCode = ?\");\r\n                pstmt2.setInt(1,Code);\r\n                pstmt2.executeUpdate();\r\n            }\r\n            else if (Shift.contentEquals(\"Evening\")|| Shift.contentEquals(\"evening\")) {\r\n                pstmt2 = conn.prepareStatement(\"UPDATE cashierdetails \\nSET ShiftStartTime = '16:00:00',ShiftEndTime = '00:00:00' \\nWHERE CashierCode = ?\");\r\n                pstmt2.setInt(1,Code);\r\n                pstmt2.executeUpdate();\r\n            }\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error Connecting to Database: \"+e.getMessage());\r\n        }\r\n    }\r\n    public static Manager get_ManagerDetails(String Username){\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM managerlogininfo\");\r\n            while (rs.next()) {\r\n                String MPassword = rs.getString(\"MPassword\");\r\n                String MUsername = rs.getString(\"MUsername\");\r\n                String ManagerName = rs.getString(\"ManagerName\");\r\n                if(MUsername.contentEquals(Username)) {\r\n                    return new Manager(ManagerName);\r\n                }\r\n            }\r\n\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n\r\n\r\n        }\r\n        catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return new Manager();\r\n    }\r\n    public static StockManager get_StockManagerDetails(String Username){\r\n        try {\r\n            Connection conn = DriverManager.getConnection(url, username, password);\r\n\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM managerlogininfo\");\r\n            while (rs.next()) {\r\n                String MPassword = rs.getString(\"MPassword\");\r\n                String MUsername = rs.getString(\"MUsername\");\r\n                String ManagerName = rs.getString(\"ManagerName\");\r\n                if(MUsername.contentEquals(Username)) {\r\n                    return new StockManager(ManagerName);\r\n                }\r\n            }\r\n\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n\r\n        }\r\n        catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return new StockManager();\r\n    }\r\n    public static ArrayList<SalesRecord> getSalesRecord(int cashier_code){\r\n        int SalesID = 0;\r\n        int CashierCode = 0;\r\n        String SaleDate = \"\";\r\n        String SaleTime = \"\";\r\n        Double Amount = 0.0;\r\n        int NoOfItems = 0;\r\n        String PaymentMethod = \"\";\r\n        ArrayList<SalesRecord> salesRecords = new ArrayList<>();\r\n        try{\r\n            Connection conn = DriverManager.getConnection(url,username,password);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"Select * FROM cashiersales\");\r\n\r\n            while(rs.next()){\r\n                SalesID = rs.getInt(\"SalesID\");\r\n                CashierCode= rs.getInt(\"CashierCode\");\r\n                SaleDate= rs.getString(\"SaleDate\");\r\n                SaleTime= rs.getString(\"SaleTIme\");\r\n                Amount= rs.getDouble(\"Amount\");\r\n                NoOfItems= rs.getInt(\"NoOfItems\");\r\n                PaymentMethod= rs.getString(\"PaymentMethod\");\r\n                if(CashierCode==cashier_code){\r\n\r\n                    salesRecords.add(new SalesRecord(SalesID,CashierCode,SaleDate,SaleTime,Amount,NoOfItems,PaymentMethod));\r\n                }\r\n            }\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return salesRecords;\r\n    }\r\n    public static ArrayList<SalesRecord> getSalesRecord(){\r\n        int SalesID = 0;\r\n        int CashierCode = 0;\r\n        String SaleDate = \"\";\r\n        String SaleTime = \"\";\r\n        Double Amount = 0.0;\r\n        int NoOfItems = 0;\r\n        String PaymentMethod = \"\";\r\n        ArrayList<SalesRecord> salesRecords = new ArrayList<>();\r\n        try{\r\n            Connection conn = DriverManager.getConnection(url,username,password);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"Select * FROM cashiersales\");\r\n\r\n            while(rs.next()){\r\n                SalesID = rs.getInt(\"SalesID\");\r\n                CashierCode= rs.getInt(\"CashierCode\");\r\n                SaleDate= rs.getString(\"SaleDate\");\r\n                SaleTime= rs.getString(\"SaleTIme\");\r\n                Amount= rs.getDouble(\"Amount\");\r\n                NoOfItems= rs.getInt(\"NoOfItems\");\r\n                PaymentMethod= rs.getString(\"PaymentMethod\");\r\n\r\n                salesRecords.add(new SalesRecord(SalesID,CashierCode,SaleDate,SaleTime,Amount,NoOfItems,PaymentMethod));\r\n            }\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return salesRecords;\r\n    }\r\n\r\n    public static  ArrayList<Order> getOrderDetail() {\r\n        int ORDERID = 0;\r\n        int CUSTOMERID = 0;\r\n        String ADDRESS = \"\";\r\n        String ORDERDATE = \"\";\r\n        String ITEMSORDERED = \"\";\r\n        int NUMBEROFITEMS = 0;\r\n        String DELIVERYDATE = \"\";\r\n        String ORDERSTATUS = \"\";\r\n        double ORDERTOTAL = 0.0;\r\n        ArrayList<Order> Orders= new ArrayList<>();\r\n        try {\r\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/onlinedeliverysystem\", username, password);\r\n            conn.setAutoCommit(true);\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM onlineorders\");\r\n            while (rs.next()) {\r\n\r\n                ORDERID = rs.getInt(\"orderID\");\r\n                CUSTOMERID = rs.getInt(\"customerID\");\r\n                ORDERDATE = rs.getString(\"orderDate\");\r\n                ITEMSORDERED = rs.getString(\"itemsOrdered\");\r\n                NUMBEROFITEMS = rs.getInt(\"numberOfItems\");\r\n                DELIVERYDATE = rs.getString(\"deliveryDate\");\r\n                ADDRESS = rs.getString(\"address\");\r\n                ORDERSTATUS = rs.getString(\"orderStatus\");\r\n                ORDERTOTAL = rs.getDouble(\"orderTotal\");\r\n                 Orders.add( new Order(ADDRESS,CUSTOMERID,DELIVERYDATE,ITEMSORDERED,NUMBEROFITEMS,ORDERSTATUS,ORDERTOTAL,ORDERID,ORDERDATE));\r\n            }\r\n            return Orders;\r\n\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database\" + e.getMessage());\r\n        }\r\n        return Orders;\r\n    }\r\n    public static ArrayList<Order> getOrderDetail(int orderID) {\r\n        int ORDERID = 0;\r\n        int CUSTOMERID = 0;\r\n        String ADDRESS = \"\";\r\n        String ORDERDATE = \"\";\r\n        String ITEMSORDERED = \"\";\r\n        int NUMBEROFITEMS = 0;\r\n        String DELIVERYDATE = \"\";\r\n        String ORDERSTATUS = \"\";\r\n        double ORDERTOTAL = 0.0;\r\n        ArrayList<Order> Orders = new ArrayList<>();\r\n        try {\r\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/onlinedeliverysystem\", username, password);\r\n            conn.setAutoCommit(true);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM onlineorders\");\r\n            while (rs.next()) {\r\n                if (rs.getInt(\"orderID\") == (orderID)) {\r\n                    ORDERID = rs.getInt(\"orderID\");\r\n                    CUSTOMERID = rs.getInt(\"customerID\");\r\n                    ORDERDATE = rs.getString(\"orderDate\");\r\n                    ITEMSORDERED = rs.getString(\"itemsOrdered\");\r\n                    NUMBEROFITEMS = rs.getInt(\"numberOfItems\");\r\n                    DELIVERYDATE = rs.getString(\"deliveryDate\");\r\n                    ADDRESS = rs.getString(\"address\");\r\n                    ORDERSTATUS = rs.getString(\"orderStatus\");\r\n                    ORDERTOTAL = rs.getDouble(\"orderTotal\");\r\n                    break;\r\n                }\r\n            }\r\n            Orders.add(new Order(ADDRESS,CUSTOMERID,DELIVERYDATE,ITEMSORDERED,NUMBEROFITEMS,ORDERSTATUS,ORDERTOTAL,ORDERID,ORDERDATE));\r\n            return Orders;\r\n        } catch (SQLException e) {\r\n            System.out.println(\"error connecting to database\" + e.getMessage());\r\n            return Orders;\r\n        }\r\n    }\r\n    public static ArrayList<Customer> getCustomerDetail(){\r\n        int CUSTOMERID = 0;\r\n        String CUSTOMERNAME = \"\";\r\n        String ADDRESS = \"\";\r\n        String PHNUMBER = \"\";\r\n        String EMAILADDRESS = \"\";\r\n        String PAYMENTMETHOD = \"\";\r\n        ArrayList<Customer> Customers = new ArrayList<>();\r\n\r\n        try {\r\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/onlinedeliverysystem\", username, password);\r\n            conn.setAutoCommit(true);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM customers\");\r\n            while (rs.next()) {\r\n                CUSTOMERID = rs.getInt(\"customerID\");\r\n                CUSTOMERNAME = rs.getString(\"customerName\");\r\n                ADDRESS = rs.getString(\"address\");\r\n                PHNUMBER = rs.getString(\"phoneNumber\");\r\n                EMAILADDRESS = rs.getString(\"emailAddress\");\r\n                PAYMENTMETHOD = rs.getString(\"paymentMethod\");\r\n                Customers.add(new Customer(CUSTOMERID,CUSTOMERNAME,ADDRESS,PHNUMBER,EMAILADDRESS,PAYMENTMETHOD));\r\n\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            System.out.println(\"error connecting to database\" + e.getMessage());\r\n        }\r\n        return Customers;\r\n    }\r\n    public static ArrayList<Customer> getCustomerDetail(int customerID){\r\n        int CUSTOMERID = 0;\r\n        String CUSTOMERNAME = \"\";\r\n        String ADDRESS = \"\";\r\n        String PHNUMBER = \"\";\r\n        String EMAILADDRESS = \"\";\r\n        String PAYMENTMETHOD = \"\";\r\n        ArrayList<Customer> Customers = new ArrayList<>();\r\n        try {\r\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/onlinedeliverysystem\", username, password);\r\n            conn.setAutoCommit(true);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM customers\");\r\n            while (rs.next()) {\r\n                if (rs.getInt(\"customerID\") == (customerID)) {\r\n                    CUSTOMERID = rs.getInt(\"customerID\");\r\n                    CUSTOMERNAME = rs.getString(\"customerName\");\r\n                    ADDRESS = rs.getString(\"address\");\r\n                    PHNUMBER = rs.getString(\"phoneNumber\");\r\n                    EMAILADDRESS = rs.getString(\"emailAddress\");\r\n                    PAYMENTMETHOD = rs.getString(\"paymentMethod\");\r\n                    break;\r\n                }\r\n            }\r\n            Customers.add(new Customer(CUSTOMERID,CUSTOMERNAME,ADDRESS,PHNUMBER,EMAILADDRESS,PAYMENTMETHOD));\r\n        } catch (SQLException e) {\r\n            System.out.println(\"error connecting to database\" + e.getMessage());\r\n        }return Customers;\r\n    }\r\n    public static ArrayList<SalesRecord> getSalesRecordID(int salesID){\r\n        int SalesID = 0;\r\n        int CashierCode = 0;\r\n        String SaleDate = \"\";\r\n        String SaleTime = \"\";\r\n        Double Amount = 0.0;\r\n        int NoOfItems = 0;\r\n        String PaymentMethod = \"\";\r\n        ArrayList<SalesRecord> salesRecords = new ArrayList<>();\r\n        //Second int parameter has no functional value\r\n        //Parameter_Restriction was included to allow for function overloading\r\n        try{\r\n            Connection conn = DriverManager.getConnection(url,username,password);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"Select * FROM cashiersales\");\r\n\r\n            while(rs.next()){\r\n                SalesID = rs.getInt(\"SalesID\");\r\n                CashierCode= rs.getInt(\"CashierCode\");\r\n                SaleDate= rs.getString(\"SaleDate\");\r\n                SaleTime= rs.getString(\"SaleTIme\");\r\n                Amount= rs.getDouble(\"Amount\");\r\n                NoOfItems= rs.getInt(\"NoOfItems\");\r\n                PaymentMethod= rs.getString(\"PaymentMethod\");\r\n                if(salesID==SalesID){\r\n                    salesRecords.add(new SalesRecord(SalesID,CashierCode,SaleDate,SaleTime,Amount,NoOfItems,PaymentMethod));\r\n                }\r\n            }\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n\r\n\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return salesRecords;\r\n    }\r\n    public static void add_SalesRecord(int CashierCode, String SaleDate, String SaleTime, double Amount, int NoOfItems, String PaymentMethod){\r\n        try{\r\n            Connection conn = DriverManager.getConnection(url,username,password);\r\n            conn.setAutoCommit(true);\r\n            PreparedStatement stmt;\r\n            stmt = conn.prepareStatement(\"INSERT INTO cashiersales (CashierCode,SaleDate,SaleTime,Amount,NoOfItems,PaymentMethod) VALUES (?, ?, ?, ?, ?, ?)\");\r\n\r\n            stmt.setInt(1,CashierCode);\r\n            stmt.setString(2,SaleDate);\r\n            stmt.setString(3,SaleTime);\r\n            stmt.setDouble(4,Amount);\r\n            stmt.setInt(5,NoOfItems);\r\n            stmt.setString(6,PaymentMethod);\r\n            int rowsInserted = stmt.executeUpdate();\r\n            stmt.close();\r\n\r\n\r\n            conn.close();\r\n            if(rowsInserted==0){\r\n                System.out.println(\"Error writing in database\");\r\n            }\r\n\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n    }\r\n    public static Item get_itemDetails(String itemName,int quantity){\r\n        String ITEMNAME=\"\";\r\n        double PRICE=0;\r\n        int QUANTITY=0,ITEMID=0;\r\n        String EXPIRYDATE=\"\";\r\n        try{\r\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM inventoryprods \");\r\n\r\n            while (rs.next()){\r\n\r\n                if(rs.getString(\"ItemName\").contentEquals(itemName)) {\r\n                     ITEMID=rs.getInt(\"itemID\");\r\n                     ITEMNAME =rs.getString(\"ItemName\");\r\n                     PRICE=rs.getDouble(\"Price\");\r\n                     QUANTITY=rs.getInt(\"Quantity\");\r\n                     EXPIRYDATE=rs.getString(\"ExpiryDate\");\r\n                }\r\n            }\r\n\r\n            if (quantity>QUANTITY){\r\n                return new Item(ITEMID,ITEMNAME,PRICE,-1,EXPIRYDATE);\r\n            }\r\n            else {\r\n                QUANTITY = quantity;\r\n            }\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n\r\n        return new Item(ITEMID,ITEMNAME,PRICE,QUANTITY,EXPIRYDATE);\r\n    }\r\n    public static Item get_itemDetails(String itemName){\r\n        int ITEMID=0;\r\n        String ITEMNAME=\"\";\r\n        double PRICE=0;\r\n        int QUANTITY=0;\r\n        String EXPIRYDATE=\"\";\r\n        String SUPP=\"\";\r\n        try{\r\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM inventoryprods \");\r\n\r\n            while (rs.next()){\r\n                //System.out.println(\"ItemName: \"+rs.getString(\"ItemName\"));\r\n                if(rs.getString(\"ItemName\").contentEquals(itemName)) {\r\n                    ITEMNAME =rs.getString(\"ItemName\");\r\n                    ITEMID=rs.getInt(\"itemID\");\r\n                    PRICE=rs.getDouble(\"Price\");\r\n                    QUANTITY=rs.getInt(\"Quantity\");\r\n                    EXPIRYDATE=rs.getString(\"ExpiryDate\");\r\n                    SUPP= rs.getString(\"SupplierName\");\r\n                }\r\n            }\r\n\r\n\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n\r\n        return new Item(ITEMID,ITEMNAME,PRICE,QUANTITY,EXPIRYDATE,SUPP);\r\n    }\r\n    public static void viewAllItems(){\r\n        int ITEMID=0;\r\n        String ITEMNAME=\"\";\r\n        double PRICE=0;\r\n        int QUANTITY=0;\r\n        String EXPIRYDATE=\"\";\r\n        String SUPP=\"\";\r\n        try{\r\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM inventoryprods \");\r\n\r\n            while (rs.next()){\r\n                    ITEMNAME =rs.getString(\"ItemName\");\r\n                    ITEMID=rs.getInt(\"itemID\");\r\n                    PRICE=rs.getDouble(\"Price\");\r\n                    QUANTITY=rs.getInt(\"Quantity\");\r\n                    EXPIRYDATE=rs.getString(\"ExpiryDate\");\r\n                    SUPP= rs.getString(\"SupplierName\");\r\n                    int[] stock_levels = Database.printStock(ITEMID);\r\n            }\r\n\r\n\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n\r\n\r\n    }\r\n    public static void updateStock(int itemID, int quantity){\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        try{\r\n            Statement stmt1 = null;\r\n\r\n            String query = \"SELECT * FROM inventorylevels\";\r\n            stmt1 = conn.createStatement();\r\n            ResultSet rs = stmt1.executeQuery(query);\r\n            PreparedStatement stmt2=null;\r\n            while(rs.next()) {\r\n                if(itemID==rs.getInt(\"itemID\")){\r\n                    int currentStockLevel = rs.getInt(\"CurrentstockLevel\");\r\n                    stmt2 = conn.prepareStatement(\"UPDATE inventorylevels SET CurrentstockLevel = ? WHERE itemID = ?\");\r\n                    stmt2.setInt(1, (currentStockLevel - quantity));\r\n                    stmt2.setInt(2, itemID);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            int rowsInserted = stmt2.executeUpdate();\r\n\r\n            stmt1.close();\r\n            stmt2.close();\r\n            conn.close();\r\n\r\n            if (rowsInserted == 0) {\r\n                System.out.println(\"Error! Stock levels could not be updated\");\r\n            }\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n    }\r\n    public static void addNewItemInv(String ItemName, double price,int quantity,String expiry_date, int currStockLev, int maxStockLev, int minStockLev, String suppName) throws SQLException {\r\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\", username, password);\r\n        try {\r\n            conn.setAutoCommit(true);\r\n\r\n            PreparedStatement stmt2;\r\n            stmt2 = conn.prepareStatement(\"INSERT INTO inventorylevels (ItemName,MaxStockLevel,MinStockLevel,CurrentstockLevel) VALUES (?, ?, ?, ?)\");\r\n            stmt2.setString(1, ItemName);\r\n            stmt2.setInt(2, maxStockLev);\r\n            stmt2.setInt(3, minStockLev);\r\n            stmt2.setInt(4, currStockLev);\r\n\r\n            PreparedStatement stmt3;\r\n            stmt3 = conn.prepareStatement(\"INSERT INTO inventoryprods (ItemName,Price,Quantity,ExpiryDate,SupplierName) VALUES (?, ?, ?, ?, ?)\");\r\n            stmt3.setString(1, ItemName);\r\n            stmt3.setDouble(2, price);\r\n            stmt3.setInt(3, quantity);\r\n            stmt3.setString(4, expiry_date);\r\n            stmt3.setString(5, suppName);\r\n\r\n\r\n            int rowsInserted2 = stmt2.executeUpdate();\r\n            int rowsInserted3 = stmt3.executeUpdate();\r\n\r\n            stmt2.close();\r\n            stmt3.close();\r\n            conn.close();\r\n\r\n            if (rowsInserted2 > 0 && rowsInserted3 > 0) {\r\n                System.out.println(\"A new sales record was inserted successfully!\");\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n            conn.rollback();\r\n        }\r\n    }\r\n    public static int[] checkStock(int ID){\r\n        String iname = null;\r\n        int current=0;\r\n        int max=0;\r\n        int min=0;\r\n        int[] stocks = new int[3];\r\n\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM inventoryprods INNER JOIN inventorylevels ON inventoryprods.itemID = inventorylevels.itemID WHERE inventoryprods.itemID = ?\");\r\n            pstmt.setInt(1, ID);\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                if(rs.getInt(\"itemID\")==ID) {\r\n                    iname = rs.getString(\"ItemName\");\r\n                    current = rs.getInt(\"CurrentstockLevel\");\r\n                    max = rs.getInt(\"MaxStockLevel\");\r\n                    min = rs.getInt(\"MinStockLevel\");\r\n                }\r\n            }\r\n            System.out.println(\"\\nItem name: \" + iname);\r\n\r\n            stocks[0] = current;\r\n            stocks[1] = max;\r\n            stocks[2] = min;\r\n\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return stocks;\r\n    }\r\n    public static int[] printStock(String itemName){\r\n        int current=0;\r\n        int max=0;\r\n        int min=0;\r\n        int[] stocks = new int[3];\r\n\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM inventoryprods INNER JOIN inventorylevels ON inventoryprods.itemID = inventorylevels.itemID WHERE inventoryprods.ItemName = ?\");\r\n            pstmt.setString(1, itemName);\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                if(rs.getString(\"ItemName\").contentEquals(itemName)) {\r\n                    current = rs.getInt(\"CurrentstockLevel\");\r\n                    max = rs.getInt(\"MaxStockLevel\");\r\n                    min = rs.getInt(\"MinStockLevel\");\r\n                }\r\n            }\r\n\r\n            stocks[0] = current;\r\n            stocks[1] = max;\r\n            stocks[2] = min;\r\n\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return stocks;\r\n    }\r\n    public static int[] printStock(int ID){\r\n        int current=0;\r\n        int max=0;\r\n        int min=0;\r\n        int[] stocks = new int[3];\r\n\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM inventoryprods INNER JOIN inventorylevels ON inventoryprods.itemID = inventorylevels.itemID WHERE inventoryprods.itemID = ?\");\r\n            pstmt.setInt(1, ID);\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                if(rs.getInt(\"ItemID\")==ID) {\r\n                    current = rs.getInt(\"CurrentstockLevel\");\r\n                    max = rs.getInt(\"MaxStockLevel\");\r\n                    min = rs.getInt(\"MinStockLevel\");\r\n                }\r\n            }\r\n\r\n            stocks[0] = current;\r\n            stocks[1] = max;\r\n            stocks[2] = min;\r\n\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return stocks;\r\n    }\r\n    public static void searchBySupplier(String suppName){\r\n        int ITEMID=0;\r\n        String ITEMNAME=\"\";\r\n        double PRICE=0;\r\n        int QUANTITY=0;\r\n        String EXPIRYDATE=\"\";\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM inventory.inventoryprods WHERE inventoryprods.SupplierName = ?\");\r\n            pstmt.setString(1, suppName);\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                if(rs.getString(\"SupplierName\").contentEquals(suppName)) {\r\n                    ITEMNAME =rs.getString(\"ItemName\");\r\n                    ITEMID=rs.getInt(\"itemID\");\r\n                    PRICE=rs.getDouble(\"Price\");\r\n                    QUANTITY=rs.getInt(\"Quantity\");\r\n                    EXPIRYDATE=rs.getString(\"ExpiryDate\");\r\n                }\r\n\r\n            }\r\n\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        }catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    public static void removeItemInv(int ID){\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        try{\r\n            String query = \"DELETE inventory.inventoryprods,  inventory.inventorylevels\\n\" +\r\n                    \"FROM inventory.inventoryprods\\n\" +\r\n                    \"INNER JOIN inventory.inventorylevels ON inventory.inventoryprods.itemID = inventory.inventorylevels.itemID\\n\" +\r\n                    \"WHERE inventory.inventoryprods.itemID = ?\";\r\n\r\n            PreparedStatement pstmt = conn.prepareStatement(query);\r\n\r\n            pstmt.setInt(1, ID);\r\n\r\n            int rowsDeleted = pstmt.executeUpdate();\r\n            System.out.println(rowsDeleted + \" record(s) deleted\");\r\n\r\n            pstmt.close();\r\n            conn.close();\r\n        }\r\n        catch (SQLException e){\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    public static void expDate() {\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\", username, password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            Statement stmt1 = null;\r\n\r\n            System.out.println(\"Item ID\\t\\t Item Name\\n\");\r\n            String query = \"SELECT * FROM inventoryprods WHERE ExpirationStatus = 'Expired'\";\r\n            stmt1 = conn.createStatement();\r\n            ResultSet rs = stmt1.executeQuery(query);\r\n            while (rs.next()) {\r\n                int ID = rs.getInt(\"itemID\");\r\n                String name = rs.getString(\"ItemName\");\r\n                System.out.printf(\"%-13s %-10s\\n\", ID, name);\r\n            }\r\n\r\n            stmt1.close();\r\n            conn.close();\r\n\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database\" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static void addNewDeliveryOrder(String orderDate, String itemsOrdered, int numberOfItems, String deliveryDate, String address, double orderTotal, String customerName, String phoneNumber, String emailAddress, String paymentMethod){\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/onlinedeliverysystem\", username, password);\r\n\r\n            conn.setAutoCommit(true);\r\n            PreparedStatement stmt2;\r\n            stmt2 = conn.prepareStatement(\"INSERT INTO customers (customerName, address, phoneNumber, emailAddress, paymentMethod) VALUES(?,?,?,?,?)\");\r\n            stmt2.setString(1,customerName);\r\n            stmt2.setString(2,address);\r\n            stmt2.setString(3,phoneNumber);\r\n            stmt2.setString(4,emailAddress);\r\n            stmt2.setString(5,paymentMethod);\r\n            Statement stmt = null;\r\n            stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM customers\");\r\n            String cusID=\"\";\r\n            while (rs.next()){\r\n                cusID = rs.getString(\"customerID\");\r\n            }\r\n            PreparedStatement stmt1;\r\n            stmt1 = conn.prepareStatement(\"INSERT INTO onlineorders (customerID,orderDate, itemsOrdered, numberOfItems, deliveryDate, address, orderTotal) VALUES (?,?,?,?,?,?,?)\");\r\n            stmt1.setString(1,cusID);\r\n            stmt1.setString(2,orderDate);\r\n            stmt1.setString(3,itemsOrdered);\r\n            stmt1.setInt(4,numberOfItems);\r\n            stmt1.setString(5,deliveryDate);\r\n            stmt1.setString(6,address);\r\n            stmt1.setDouble(7,orderTotal);\r\n\r\n\r\n\r\n            int rowsInserted1 = stmt1.executeUpdate();\r\n            int rowsInserted2 = stmt2.executeUpdate();\r\n\r\n            stmt1.close();\r\n            stmt2.close();\r\n            conn.close();\r\n\r\n            if(rowsInserted1>0 && rowsInserted2>0)\r\n                System.out.println(\"A new online record was inserted successfully\");\r\n        }catch(SQLException e) {\r\n            System.out.println(\"Error connecting to database: \"+e.getMessage());\r\n            try {\r\n                conn.rollback();\r\n            }\r\n            catch (SQLException a){\r\n\r\n            }\r\n            }\r\n        }\r\n\r\n    public static ArrayList<ProdPerformance> displayProdPerformance(){\r\n        int itemID=0;\r\n        String ItemName=\"\";\r\n        int targetS = 0;\r\n        int actualS = 0;\r\n        int avgS = 0;\r\n        double profitMargin = 0.0;\r\n        double unitP = 0.0;\r\n        double costP = 0.0;\r\n        int salesRank = 0;\r\n        ArrayList<ProdPerformance> prodPerformance = new ArrayList<ProdPerformance>();\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/salesrecords\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM salesrecords.productperformance\");\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                itemID=rs.getInt(\"itemID\");\r\n                ItemName =rs.getString(\"ItemName\");\r\n                targetS=rs.getInt(\"targetSaleQuantity\");\r\n                actualS=rs.getInt(\"actualSaleQuantity\");\r\n                avgS=rs.getInt(\"avgSaleQuantity\");\r\n                profitMargin=rs.getDouble(\"profitMargin\");\r\n                unitP=rs.getDouble(\"unitPrice\");\r\n                costP=rs.getDouble(\"costPrice\");\r\n                salesRank=rs.getInt(\"salesRank\");\r\n                prodPerformance.add(new ProdPerformance(itemID, ItemName, targetS, actualS, avgS, profitMargin, unitP, costP, salesRank));\r\n\r\n\r\n            }\r\n\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        }catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return prodPerformance;\r\n    }\r\n    public static ArrayList<ProdPerformance> displayProdPerformance(int ID) throws SQLException {\r\n        int itemID = 0;\r\n        String ItemName = \"\";\r\n        int targetS = 0;\r\n        int actualS = 0;\r\n        int avgS = 0;\r\n        double profitMargin = 0.0;\r\n        double unitP = 0.0;\r\n        double costP = 0.0;\r\n        int salesRank = 0;\r\n        ArrayList<ProdPerformance> prodPerformance = new ArrayList<>();\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/salesrecords\", username, password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM salesrecords.productperformance\");\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()) {\r\n                if (rs.getInt(\"itemID\") == ID) {\r\n                    itemID = rs.getInt(\"itemID\");\r\n                    ItemName = rs.getString(\"ItemName\");\r\n                    targetS = rs.getInt(\"targetSaleQuantity\");\r\n                    actualS = rs.getInt(\"actualSaleQuantity\");\r\n                    avgS = rs.getInt(\"avgSaleQuantity\");\r\n                    profitMargin = rs.getDouble(\"profitMargin\");\r\n                    unitP = rs.getDouble(\"unitPrice\");\r\n                    costP = rs.getDouble(\"costPrice\");\r\n                    salesRank = rs.getInt(\"salesRank\");\r\n                    prodPerformance.add(new ProdPerformance(itemID, ItemName, targetS, actualS,avgS,profitMargin,unitP,costP,salesRank));\r\n                }\r\n            }\r\n        }catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return prodPerformance;\r\n    }\r\n\r\n    public static sales calcSalesAnalytics(int ID){\r\n        int itemID=0;\r\n        String ItemName=\"\";\r\n        int targetS = 0;\r\n        int actualS = 0;\r\n        int avgS = 0;\r\n        double profitMargin = 0.0;\r\n        double unitP = 0.0;\r\n        double costP = 0.0;\r\n        int salesRank = 0;\r\n\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/salesrecords\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM salesrecords.productperformance\");\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                if(rs.getInt(\"itemID\") == ID) {\r\n                    itemID = rs.getInt(\"itemID\");\r\n                    ItemName = rs.getString(\"ItemName\");\r\n                    targetS = rs.getInt(\"targetSaleQuantity\");\r\n                    actualS = rs.getInt(\"actualSaleQuantity\");\r\n                    avgS = rs.getInt(\"avgSaleQuantity\");\r\n                    profitMargin = rs.getDouble(\"profitMargin\");\r\n                    unitP = rs.getDouble(\"unitPrice\");\r\n                    costP = rs.getDouble(\"costPrice\");\r\n                    salesRank = rs.getInt(\"salesRank\");\r\n                }\r\n            }\r\n\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        }catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return new sales(itemID, ItemName, targetS, actualS,  avgS, profitMargin, unitP, costP, salesRank);\r\n    }//used in prodPerformanceInsight() in sales class\r\n\r\n    public static void inventoryPerformance(){\r\n        int targetS = 0;\r\n        int actualS = 0;\r\n        double unitP = 0.0;\r\n        double costP = 0.0, profit = 0, loss = 0;\r\n        int itemsSold = 0, titemsSold = 0;\r\n        int targetCount = 0, actualCount = 0, equalCount = 0;\r\n        double totalRev = 0, expectedRev = 0, totalExpenses = 0;\r\n        ArrayList<String> popular = new ArrayList<>();\r\n        ArrayList<String> least = new ArrayList<>();\r\n\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/salesrecords\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM salesrecords.productperformance\");\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                targetS=rs.getInt(\"targetSaleQuantity\");\r\n                actualS=rs.getInt(\"actualSaleQuantity\");\r\n                unitP=rs.getDouble(\"unitPrice\");\r\n                costP=rs.getDouble(\"costPrice\");\r\n\r\n                if(targetS > actualS){\r\n                    targetCount++;\r\n                }\r\n                else if(targetS < actualS){\r\n                    actualCount++;\r\n                }\r\n                else{\r\n                    equalCount++;\r\n                }\r\n\r\n                totalExpenses = totalExpenses + (actualS * costP);\r\n                totalRev = totalRev + (actualS * unitP);\r\n\r\n                expectedRev = expectedRev + (targetS * unitP);\r\n                itemsSold = itemsSold + actualS;\r\n                titemsSold = titemsSold + targetS;\r\n\r\n                if(actualS > 2000){\r\n                    popular.add(rs.getString(\"ItemName\"));\r\n                }\r\n\r\n                if(actualS < 300){\r\n                    least.add(rs.getString(\"ItemName\"));\r\n                }\r\n            }\r\n            System.out.println(\"***Monthly Inventory Performance Insight***\\n\");\r\n            System.out.printf(\"Total Expenses: %.2f\\n\", totalExpenses);\r\n            System.out.println(\"Expected Revenue: \" + expectedRev);\r\n            System.out.println(\"Revenue generated: \" + totalRev);\r\n            System.out.println();\r\n\r\n            if(totalRev > totalExpenses){\r\n                profit = totalRev - totalExpenses;\r\n                System.out.printf(\"Gross Profit: %.2f\\n\", profit);\r\n            }\r\n            else{\r\n                loss = totalExpenses - totalRev;\r\n                System.out.printf(\"Net Loss: %.2f\\n\", loss);\r\n            }\r\n\r\n            System.out.println();\r\n            System.out.println(\"Number of items which did not surpass target sales: \" + targetCount);\r\n            System.out.println(\"Number of items which surpassed target sales: \" + actualCount);\r\n            System.out.println(\"Number of items with equal target and actual sales: \" + equalCount);\r\n            System.out.println(\"Expected number of items to be sold: \" + titemsSold);\r\n            System.out.println(\"Number of items sold: \" + itemsSold);\r\n            System.out.println();\r\n\r\n            System.out.println(\"Most popular product(s)\\n\");\r\n            for (String value : popular) {\r\n                System.out.println(value);\r\n            }\r\n            System.out.println(\"\\nLeast popular product(s)\\n\");\r\n            for (String s : least) {\r\n                System.out.println(s);\r\n            }\r\n\r\n            System.out.println();\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        }catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    public static ArrayList<Stock> checkitemStock(){\r\n        int itemID = 0;\r\n        String iname = null;\r\n        int current=0;\r\n        int max=0;\r\n        int min=0;\r\n        ArrayList<Stock> Stocks = new ArrayList<>();\r\n\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        try {\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM inventorylevels\");\r\n\r\n            while (rs.next()){\r\n                itemID = rs.getInt(\"itemID\");\r\n                iname = rs.getString(\"ItemName\");\r\n                current = rs.getInt(\"CurrentstockLevel\");\r\n                max = rs.getInt(\"MaxStockLevel\");\r\n                min = rs.getInt(\"MinStockLevel\");\r\n                Stocks.add(new Stock(itemID,max,min,current,iname));\r\n            }\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return Stocks;\r\n    }\r\n    public static ArrayList<Stock> checkitemStock(int ID){\r\n        int itemID = 0;\r\n        String iname = null;\r\n        int current=0;\r\n        int max=0;\r\n        int min=0;\r\n        ArrayList<Stock> Stocks = new ArrayList<>();\r\n\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM inventorylevels\");\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                if (rs.getInt(\"itemID\")==ID){\r\n                    iname = rs.getString(\"ItemName\");\r\n                    current = rs.getInt(\"CurrentstockLevel\");\r\n                    max = rs.getInt(\"MaxStockLevel\");\r\n                    min = rs.getInt(\"MinStockLevel\");\r\n                    Stocks.add(new Stock(ID,max,min,current,iname));\r\n                }\r\n            }\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return Stocks;\r\n    }\r\n    public static ArrayList<Item> expDateReturn() {\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\", username, password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        ArrayList<Item> Items = new ArrayList<>();\r\n        try {\r\n            Statement stmt1 = null;\r\n\r\n            String query = \"SELECT * FROM inventoryprods WHERE ExpirationStatus = 'Expired'\";\r\n            stmt1 = conn.createStatement();\r\n            ResultSet rs = stmt1.executeQuery(query);\r\n            while (rs.next()) {\r\n                int ID = rs.getInt(\"itemID\");\r\n                String name = rs.getString(\"ItemName\");\r\n                Items.add(new Item(ID,name));\r\n            }\r\n\r\n            stmt1.close();\r\n            conn.close();\r\n\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error connecting to database\" + e.getMessage());\r\n        }\r\n        return Items;\r\n    }\r\n    public static ArrayList<Item> searchSupplier(String itemName){\r\n        int ITEMID=0;\r\n        String ITEMNAME=\"\";\r\n        double PRICE=0;\r\n        int QUANTITY=0;\r\n        String EXPIRYDATE=\"\";\r\n        String SupplierName = \"\";\r\n        Connection conn = null;\r\n        ArrayList<Item> Suppliers = new ArrayList<>();\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM inventoryprods WHERE itemName = ?\");\r\n            pstmt.setString(1, itemName);\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                if(rs.getString(\"itemName\").contentEquals(itemName)) {\r\n                    ITEMNAME =rs.getString(\"ItemName\");\r\n                    ITEMID=rs.getInt(\"itemID\");\r\n                    PRICE=rs.getDouble(\"Price\");\r\n                    QUANTITY=rs.getInt(\"Quantity\");\r\n                    EXPIRYDATE=rs.getString(\"ExpiryDate\");\r\n                    SupplierName = rs.getString(\"SupplierName\");\r\n                }\r\n                Suppliers.add(new Item(ITEMID,ITEMNAME,PRICE,QUANTITY,EXPIRYDATE,SupplierName));\r\n            }\r\n\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        }catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return Suppliers;\r\n    }\r\n    public static ArrayList<Item> searchSupplier(int itemID){\r\n        String SUPPNAME = \"\";\r\n        int ITEMID=0;\r\n        String ITEMNAME=\"\";\r\n        double PRICE=0;\r\n        int QUANTITY=0;\r\n        String EXPIRYDATE=\"\";\r\n        Connection conn = null;\r\n        ArrayList<Item> Suppliers = new ArrayList<>();\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM inventoryprods WHERE itemID = ?\");\r\n            pstmt.setInt(1, itemID);\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                if(rs.getInt(\"itemID\")==itemID) {\r\n                    ITEMNAME =rs.getString(\"ItemName\");\r\n                    ITEMID=rs.getInt(\"itemID\");\r\n                    PRICE=rs.getDouble(\"Price\");\r\n                    QUANTITY=rs.getInt(\"Quantity\");\r\n                    EXPIRYDATE=rs.getString(\"ExpiryDate\");\r\n                    SUPPNAME = rs.getString(\"SupplierName\");\r\n                }\r\n                Item item = new Item(ITEMID,ITEMNAME,PRICE,QUANTITY,EXPIRYDATE);\r\n                item.setSupp_name(SUPPNAME);\r\n\r\n                Suppliers.add(item);\r\n            }\r\n\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        }catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return Suppliers;\r\n    }\r\n    public static ArrayList<Supplier> getSupplierDetails(String suppName){\r\n        int suppID=0;\r\n        String supplierName=\"\";\r\n        String cname=\"\";\r\n        String title=\"\";\r\n        String add=\"\";\r\n        String city=\"\";\r\n        String region=\"\";\r\n        String pcode=\"\";\r\n        String country=\"\";\r\n        String ph=\"\";\r\n        String fax=\"\";\r\n        String email=\"\";\r\n        String web=\"\";\r\n        ArrayList<Supplier> searchSupplier = new ArrayList<>();\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            PreparedStatement pstmt = conn.prepareStatement(\"SELECT * FROM inventory.supplierinfo WHERE supplierinfo.SupplierName=?\");\r\n            pstmt.setString(1, suppName);\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            while (rs.next()){\r\n                if(rs.getString(\"SupplierName\").contentEquals(suppName)) {\r\n                    suppID = rs.getInt(\"SupplierID\");\r\n                    supplierName = rs.getString(\"SupplierName\");\r\n                    cname = rs.getString(\"ContactName\");\r\n                    title = rs.getString(\"ContactTitle\");\r\n                    add = rs.getString(\"Address\");\r\n                    city = rs.getString(\"City\");\r\n                    region = rs.getString(\"Region\");\r\n                    pcode = rs.getString(\"PostalCode\");\r\n                    country = rs.getString(\"Country\");\r\n                    ph = rs.getString(\"Phone\");\r\n                    fax = rs.getString(\"Fax\");\r\n                    email = rs.getString(\"Email\");\r\n                    web = rs.getString(\"Website\");\r\n                }\r\n                searchSupplier.add(new Supplier(suppID,supplierName,cname,title,add,city,region,pcode,country,ph,fax,email,web));\r\n            }\r\n\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        }catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return searchSupplier;\r\n    }\r\n    public static ArrayList<Supplier> getSupplierDetails(){\r\n        int suppID=0;\r\n        String supplierName=\"\";\r\n        String cname=\"\";\r\n        String title=\"\";\r\n        String add=\"\";\r\n        String city=\"\";\r\n        String region=\"\";\r\n        String pcode=\"\";\r\n        String country=\"\";\r\n        String ph=\"\";\r\n        String fax=\"\";\r\n        String email=\"\";\r\n        String web=\"\";\r\n        ArrayList<Supplier> searchSupplier = new ArrayList<>();\r\n        Connection conn = null;\r\n        try {\r\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n            conn.setAutoCommit(true);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        try {\r\n            Statement pstmt = conn.createStatement();\r\n            ResultSet rs = pstmt.executeQuery(\"SELECT * FROM inventory.supplierinfo\");\r\n\r\n            while (rs.next()){\r\n\r\n                suppID = rs.getInt(\"SupplierID\");\r\n                supplierName = rs.getString(\"SupplierName\");\r\n                cname = rs.getString(\"ContactName\");\r\n                title = rs.getString(\"ContactTitle\");\r\n                add = rs.getString(\"Address\");\r\n                city = rs.getString(\"City\");\r\n                region = rs.getString(\"Region\");\r\n                pcode = rs.getString(\"PostalCode\");\r\n                country = rs.getString(\"Country\");\r\n                ph = rs.getString(\"Phone\");\r\n                fax = rs.getString(\"Fax\");\r\n                email = rs.getString(\"Email\");\r\n                web = rs.getString(\"Website\");\r\n\r\n                searchSupplier.add(new Supplier(suppID,supplierName,cname,title,add,city,region,pcode,country,ph,fax,email,web));\r\n\r\n            }\r\n\r\n            rs.close();\r\n            pstmt.close();\r\n            conn.close();\r\n\r\n        }catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return searchSupplier;\r\n    }\r\n    public static ArrayList<Item> getitemDetails(){\r\n\r\n        int ITEMID=0;\r\n        String ITEMNAME=\"\";\r\n        double PRICE=0;\r\n        int QUANTITY=0;\r\n        String EXPIRYDATE=\"\";\r\n        String SUPP=\"\";\r\n        ArrayList<Item> Items = new ArrayList<>() ;\r\n        try{\r\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM inventoryprods \");\r\n            while (rs.next()){\r\n                //System.out.println(\"ItemName: \"+rs.getString(\"ItemName\"));\r\n                ITEMNAME =rs.getString(\"ItemName\");\r\n                ITEMID=rs.getInt(\"itemID\");\r\n                PRICE=rs.getDouble(\"Price\");\r\n                QUANTITY=rs.getInt(\"Quantity\");\r\n                EXPIRYDATE=rs.getString(\"ExpiryDate\");\r\n                SUPP= rs.getString(\"SupplierName\");\r\n                Items.add(new Item(ITEMID,ITEMNAME,PRICE,QUANTITY,EXPIRYDATE,SUPP));\r\n            }\r\n\r\n\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        //System.out.println(\"Check\");;\r\n        return Items;\r\n    }\r\n    public static ArrayList<Item> getitemDetails(int ItemID){\r\n        int ITEMID=0;\r\n        String ITEMNAME=\"\";\r\n        double PRICE=0;\r\n        int QUANTITY=0;\r\n        String EXPIRYDATE=\"\";\r\n        String SUPP=\"\";\r\n        ArrayList<Item> Items = new ArrayList<>();\r\n        try{\r\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM inventoryprods \");\r\n            while (rs.next()){\r\n                if(ItemID==rs.getInt(\"itemID\")){\r\n                    //System.out.println(\"ItemName: \"+rs.getString(\"ItemName\"));\r\n                    ITEMNAME =rs.getString(\"ItemName\");\r\n                    ITEMID=rs.getInt(\"itemID\");\r\n                    PRICE=rs.getDouble(\"Price\");\r\n                    QUANTITY=rs.getInt(\"Quantity\");\r\n                    EXPIRYDATE=rs.getString(\"ExpiryDate\");\r\n                    SUPP= rs.getString(\"SupplierName\");\r\n                    Items.add(new Item(ITEMID,ITEMNAME,PRICE,QUANTITY,EXPIRYDATE,SUPP));\r\n                }\r\n            }\r\n\r\n\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return Items;\r\n        //System.out.println(\"Check\");;\r\n    }\r\n    public static ArrayList<Item> getitemDetails(String itemName){\r\n        int ITEMID=0;\r\n        String ITEMNAME=\"\";\r\n        double PRICE=0;\r\n        int QUANTITY=0;\r\n        String EXPIRYDATE=\"\";\r\n        String SUPP=\"\";\r\n        ArrayList<Item> Items = new ArrayList<>();\r\n        try{\r\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/inventory\",username,password);\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM inventoryprods \");\r\n            while (rs.next()){\r\n                if(itemName.contentEquals(rs.getString(\"ItemName\"))){\r\n\r\n                    ITEMNAME =rs.getString(\"ItemName\");\r\n                    ITEMID=rs.getInt(\"itemID\");\r\n                    PRICE=rs.getDouble(\"Price\");\r\n                    QUANTITY=rs.getInt(\"Quantity\");\r\n                    EXPIRYDATE=rs.getString(\"ExpiryDate\");\r\n                    SUPP= rs.getString(\"SupplierName\");\r\n                    Items.add(new Item(ITEMID,ITEMNAME,PRICE,QUANTITY,EXPIRYDATE,SUPP));\r\n                }\r\n            }\r\n\r\n\r\n            rs.close();\r\n            stmt.close();\r\n            conn.close();\r\n        }\r\n        catch (SQLException e){\r\n            System.out.println(\"Error connecting to database: \" + e.getMessage());\r\n        }\r\n        return Items;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Database.java b/src/Database.java
--- a/src/Database.java	(revision 373041b1f0765f0b10e15d8b20a35ee63ad5365a)
+++ b/src/Database.java	(date 1714873693772)
@@ -5,6 +5,11 @@
     private static final String url = "jdbc:mysql://localhost:3306/employees";
     private static final String username = "root";
     private static final String password = "Randhawa@147";
+    public void Hello_Database(){
+        int a = 0;
+        System.out.println("Hello World");
+
+    }
     public static int getSalesID() {
         int SalesID =0;
         try{
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e14cec2b-16d3-4cf6-beb0-ba1230404b1d\" name=\"Changes\" comment=\"DS Final System\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/HashMap.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/HashMap.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PREVIOUS_COMMIT_AUTHORS\">\r\n      <list>\r\n        <option value=\"DESKTOP-3HSAGII\\Rafay &lt;mrafay280@gmail.com&gt;\" />\r\n      </list>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2YTCevrP5kFF6MLcNcGpirDhtso\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"Application.Main.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"jdk.selected.JAVA_MODULE\": \"openjdk-20\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"D:/Java/DS lab/DS_Project\",\r\n    \"project.structure.last.edited\": \"Libraries\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"preferences.pluginManager\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\hp Zbook\\Desktop\\POS_Software\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Main\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"POS_Software\" />\r\n      <option name=\"VM_PARAMETERS\" value=\"--module-path &quot;C:\\Users\\hp Zbook\\Desktop\\javafx-sdk-21.0.1\\lib&quot; --add-modules javafx.controls,javafx.fxml\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Testing\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Testing\" />\r\n      <module name=\"POS_Software\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Testing\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-20.0.2-azul-20.0.2-8336523bb0d9-ce1e98ff\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e14cec2b-16d3-4cf6-beb0-ba1230404b1d\" name=\"Changes\" comment=\"\" />\r\n      <created>1700540281036</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1700540281036</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Yahan tk sn chl raha hai&#10;&#10;Cashiers ki management complete hogai hai\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1700998199708</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1700998199708</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Yahan tk sn chl raha hai&#10;&#10;Cashiers ki management complete hogai hai\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1700998239828</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1700998239828</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Moving on to Stock Management\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1701024390714</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1701024390714</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Mera Kaam Khatam\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1701063548724</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1701063548724</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Final Version\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1701357970660</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1701357970660</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Final Version\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1701358336632</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1701358336632</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"DS Final System\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1701841321492</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1701841321492</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"DS Final System\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1701842677460</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1701842677460</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"9\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Final\" />\r\n    <MESSAGE value=\"Yahan tk sn chl raha hai&#10;&#10;Cashiers ki management complete hogai hai\" />\r\n    <MESSAGE value=\"Moving on to Stock Management\" />\r\n    <MESSAGE value=\"Mera Kaam Khatam\" />\r\n    <MESSAGE value=\"Final Version\" />\r\n    <MESSAGE value=\"DS Final System\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"DS Final System\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 373041b1f0765f0b10e15d8b20a35ee63ad5365a)
+++ b/.idea/workspace.xml	(date 1714873693986)
@@ -6,7 +6,7 @@
   <component name="ChangeListManager">
     <list default="true" id="e14cec2b-16d3-4cf6-beb0-ba1230404b1d" name="Changes" comment="DS Final System">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/HashMap.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/HashMap.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Database.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Database.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -40,24 +40,24 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_ADD_EXTERNAL_FILES": "true",
-    "Application.Main.executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "master",
-    "ignore.virus.scanning.warn.message": "true",
-    "jdk.selected.JAVA_MODULE": "openjdk-20",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "D:/Java/DS lab/DS_Project",
-    "project.structure.last.edited": "Libraries",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.2",
-    "settings.editor.selected.configurable": "preferences.pluginManager"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
+    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
+    &quot;jdk.selected.JAVA_MODULE&quot;: &quot;openjdk-20&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/hp Zbook/Desktop/POS_Software&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CreateClassDialog.RecentsKey">
       <recent name="" />
@@ -168,8 +168,35 @@
       <option name="project" value="LOCAL" />
       <updated>1701842677460</updated>
     </task>
-    <option name="localTasksCounter" value="9" />
+    <task id="LOCAL-00009" summary="DS Final System">
+      <option name="closed" value="true" />
+      <created>1714222969515</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1714222969515</updated>
+    </task>
+    <task id="LOCAL-00010" summary="DS Final System">
+      <option name="closed" value="true" />
+      <created>1714222997745</created>
+      <option name="number" value="00010" />
+      <option name="presentableId" value="LOCAL-00010" />
+      <option name="project" value="LOCAL" />
+      <updated>1714222997745</updated>
+    </task>
+    <option name="localTasksCounter" value="11" />
     <servers />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
   </component>
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
